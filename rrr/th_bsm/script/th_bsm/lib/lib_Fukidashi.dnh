// フォント設定
let tmp_key = GetAreaCommonData(CAREA_CONFIG, "AccKey", 0);
let baseFont = "simhei";
if(tmp_key==0){baseFont = "simhei";}
else{baseFont = "MS Gothic";}

let baseFontSize = 20;
let baseFontBold = true;
let baseFontLinePitch = 8;
let baseFontSidePitch = -2;

let FUKIDASHI_NORMAL	= 0;	// ふつうの
let FUKIDASHI_ANGER	= 1;	// ハゲしい！
let FUKIDASHI_THINK	= 2;	// かんがえちゅう
let FUKIDASHI_AFRAID	= 3;	// ふわふわ

let FUKIDASHI_LEFT = 0;
let FUKIDASHI_RIGHT = 1;
let FUKIDASHI_TOP_LEFT = 2;
let FUKIDASHI_TOP_RIGHT = 3;

//吹き出しセット
function MakeFukidashi(x, y, type, f_position, text)
{
	return(_MakeFukidashi(x, y, type, f_position, text, priorityTalk+1));
}
//（最前面）
function MakeFukidashiFront(x, y, type, f_position, text)
{
	return(_MakeFukidashi(x, y, type, f_position, text, 99));
}

// 吹き出しを設置する
function _MakeFukidashi(x, y, type, f_position, text, t_priority)
{
	// テキスト作るよ！
	let objText = ObjText_Create();
	Obj_SetRenderPriorityI(objText, t_priority+1);
	ObjText_SetFontType(objText, baseFont);
	ObjText_SetFontSize(objText, baseFontSize);
	ObjText_SetFontBold(objText, baseFontBold);
	ObjText_SetLinePitch(objText, baseFontLinePitch);
	ObjText_SetSidePitch(objText, baseFontSidePitch);
	ObjText_SetText(objText, text);
	
	let text_width = ObjText_GetTotalWidth(objText) + 160;
	let text_height = ObjText_GetTotalHeight(objText) + 68;
	let f_width = ceil(text_width/16)*16;	// 横幅
	let f_height = text_height;		// 縦幅
	
	//吹き出しセット
	let objFukidashi = MakeFukidashiObj(type, f_width, f_height);
	
	Obj_SetRenderPriorityI(objFukidashi, t_priority);
	ObjRender_SetPosition(objFukidashi, x, y, 0);
	if (f_position == FUKIDASHI_LEFT || f_position == FUKIDASHI_RIGHT)
		{ ObjRender_SetAngleX(objFukidashi, 180); }
	if (f_position == FUKIDASHI_RIGHT || f_position == FUKIDASHI_TOP_RIGHT)
		{ ObjRender_SetAngleY(objFukidashi, 180); }
	
	// 文字の微調整
	let offset_x = 32 + (f_width-text_width)/2;
	let offset_y = 24;
	if (f_position == FUKIDASHI_RIGHT) {
		let ox = -f_width+offset_x+96;
		let oy = -f_height+offset_y+14;
		ObjRender_SetPosition(objText, x+ox, y+oy, 0);
		ObjText_SetTransCenter(objText, -ox, -oy);
	} else if (f_position == FUKIDASHI_LEFT) {
		let ox = offset_x;
		let oy = -f_height+offset_y+14;
		ObjRender_SetPosition(objText, x+offset_x, y+oy, 0);
		ObjText_SetTransCenter(objText, -ox, -oy);
	} else if (f_position == FUKIDASHI_TOP_RIGHT) {
		let ox = -f_width+offset_x+98;
		let oy = offset_y+12;
		ObjRender_SetPosition(objText, x+ox, y+oy, 0);
		ObjText_SetTransCenter(objText, -ox, -oy);
	} else {
		let ox = offset_x;
		let oy = offset_y+12;
		ObjRender_SetPosition(objText, x+offset_x, y+oy, 0);
		ObjText_SetTransCenter(objText, -ox, -oy);
	}
	ObjText_SetAutoTransCenter(objText, false);
	ObjRender_SetColor(objText, 0, 0, 0);
	FukidashiMotion(objFukidashi, objText);
	
	return(objText);
	
	task FukidashiMotion(objFukidashi, objText)
	{
		ascent(i in 0 .. 8)
		{
			let tmp = (i+1)/8;
			ObjRender_SetScaleX(objFukidashi, tmp);
			ObjRender_SetScaleX(objText, tmp);
			yield;
		}
		while(!Obj_IsDeleted(objFukidashi) && !Obj_IsDeleted(objText))
		{
			if (Obj_GetValueD(objText, "DELETED", false)) { break; }
			yield;
		}
		descent(i in 0 .. 8)
		{
			let tmp = (i+1)/8;
			ObjRender_SetScaleX(objFukidashi, tmp);
			ObjRender_SetScaleX(objText, tmp);
			yield;
		}
		Obj_Delete(objFukidashi);
		Obj_Delete(objText);
	}
}

//吹き出し削除
function DeleteFukidashi(obj)
{
	Obj_SetValue(obj, "DELETED", true);
}

//吹き出しオブジェクト作成
function MakeFukidashiObj(type, f_width, f_height)
{
	//初期設定
	let rectX = 0; let rectY = 0;
	
	alternative(type)
	case(FUKIDASHI_NORMAL)
		{ rectX = 0; rectY = 0; }
	case(FUKIDASHI_ANGER)
		{ rectX = 0; rectY = 128; }
	case(FUKIDASHI_THINK)
		{ rectX = 0; rectY = 256; }
	case(FUKIDASHI_AFRAID)
		{ rectX = 0; rectY = 384; }
	
	//f_width=96より小さいサイズは未対応＆16の倍数のみ
	f_width = ceil(max(f_width-96, 0)/16) * 16;
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, 6*9);
	ObjPrim_SetTexture(obj, imgEffectBaloon);
	
	// 中心部のサイズ
	let fuki_t = min(48, max(0, (f_height-64)/2)+32);	// 上切り取り部分
	let fuki_h = max(0, f_height - fuki_t*2);
	let fuki_w = max(0, f_width - 96);
	
	// 左
	let base_vc = 0; let fuki_x = 0; let fuki_y = 0;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+0, 48, fuki_t,
			fuki_x, fuki_y, 48, fuki_t);
	base_vc += 6; fuki_y += fuki_t;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+fuki_t, 48, 128-fuki_t*2,
			fuki_x, fuki_y, 48, fuki_h);
	base_vc += 6; fuki_y += fuki_h;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+128-fuki_t, 48, fuki_t,
			fuki_x, fuki_y, 48, fuki_t);
	// 真ん中ループ部分
	fuki_y = 0; fuki_x += 48;
	base_vc += 6;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+512, fuki_w, fuki_t,
			fuki_x, fuki_y, fuki_w, fuki_t);
	base_vc += 6; fuki_y += fuki_t;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+512+fuki_t, fuki_w, 128-fuki_t*2,
			fuki_x, fuki_y, fuki_w, fuki_h);
	base_vc += 6; fuki_y += fuki_h;
	AddImg_Triangle01(obj, base_vc,
			rectX+0, rectY+512+128-fuki_t, fuki_w, fuki_t,
			fuki_x, fuki_y, fuki_w, fuki_t);
	// 右
	fuki_y = 0; fuki_x += fuki_w;
	base_vc += 6;
	AddImg_Triangle01(obj, base_vc,
			rectX+48, rectY+0, 48, fuki_t,
			fuki_x, fuki_y, 48, fuki_t);
	base_vc += 6; fuki_y += fuki_t;
	AddImg_Triangle01(obj, base_vc,
			rectX+48, rectY+fuki_t, 48, 128-fuki_t*2,
			fuki_x, fuki_y, 48, fuki_h);
	base_vc += 6; fuki_y += fuki_h;
	AddImg_Triangle01(obj, base_vc,
			rectX+48, rectY+128-fuki_t, 48, fuki_t,
			fuki_x, fuki_y, 48, fuki_t);
	return (obj);

	//6頂点の座標を追加
	function AddImg_Triangle01(obj, base_vc,
			x1, y1, w, h,		//切り取り範囲
			to_x, to_y, to_w, to_h	//貼り付け範囲
		)
	{
		ObjPrim_SetVertexUVT(obj, base_vc+0, x1, y1);
		ObjPrim_SetVertexUVT(obj, base_vc+1, x1, y1+h);
		ObjPrim_SetVertexUVT(obj, base_vc+2, x1+w, y1);
		ObjPrim_SetVertexUVT(obj, base_vc+3, x1+w, y1);
		ObjPrim_SetVertexUVT(obj, base_vc+4, x1, y1+h);
		ObjPrim_SetVertexUVT(obj, base_vc+5, x1+w, y1+h);
		ObjPrim_SetVertexPosition(obj, base_vc+0, to_x, to_y, 0);
		ObjPrim_SetVertexPosition(obj, base_vc+1, to_x, to_y+to_h, 0);
		ObjPrim_SetVertexPosition(obj, base_vc+2, to_x+to_w, to_y, 0);
		ObjPrim_SetVertexPosition(obj, base_vc+3, to_x+to_w, to_y, 0);
		ObjPrim_SetVertexPosition(obj, base_vc+4, to_x, to_y+to_h, 0);
		ObjPrim_SetVertexPosition(obj, base_vc+5, to_x+to_w, to_y+to_h, 0);
	}
}

// --- 以下は地の文用の会話枠

// 吹き出しを設置する
function _MakeDescriptive(text, t_priority)
{
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	// テキスト作るよ！
	let objText = MakeDescriptiveText(text, baseTextX, baseTextY, baseWidth, baseHeight, t_priority);
	
	//吹き出しセット
	let objFukidashi = MakeDescriptiveObj(baseWidth, baseHeight);
	Obj_SetRenderPriorityI(objFukidashi, t_priority);
	ObjRender_SetPosition(objFukidashi, baseX, baseY+baseHeight, 0);
	
	DescriptiveMotion(objFukidashi, objText);
	return(objText);
	
	task DescriptiveMotion(objFukidashi, objText)
	{
		ascent(i in 0 .. 8)
		{
			let tmp = (i+1)/8;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		while(!Obj_IsDeleted(objFukidashi) && !Obj_IsDeleted(objText))
		{
			if (Obj_GetValueD(objText, "DELETED", false)) { break; }
			yield;
		}
		descent(i in 0 .. 8)
		{
			let tmp = (i+1)/8;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		Obj_Delete(objFukidashi);
		Obj_Delete(objText);
	}
}

//吹き出しオブジェクト作成
function MakeDescriptiveObj(tx, ty)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, imgEffectTFrame);
	ObjSprite2D_SetSourceRect(obj, 0, 0, tx, ty);
	ObjSprite2D_SetDestRect(obj, 0, -ty, tx, 0);
	ObjRender_SetAlpha(obj, 128);
	return (obj);
}


// --- 地の会話文用、選択肢

// 吹き出しを設置する
function _MakeChoiseWindow(bx, by, select_texts, t_priority)
{
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	let select_count = length(select_texts);
	let selectValue = 0;
	
	// テキスト作るよ！
	let objSelects = [];
	ascent(i in 0 .. select_count)
	{
		let tmp_obj = MakeDescriptiveText(select_texts[i], bx, by+i*24, GetScreenWidth, 32, t_priority);
		ObjRender_SetColor(tmp_obj, 128, 128, 128);
		objSelects = objSelects ~ [tmp_obj];
	}
	
	ascent(i in 0 .. 8)
	{
		let tmp = (i+1)/8;
		ascent(i in 0 .. length(objSelects))
		{
			ObjRender_SetAlpha(objSelects[i], tmp*255);
		}
		yield;
	}
	while(true)
	{
		if (GetVirtualKeyState(VK_UP) == KEY_PUSH) { selectValue = (selectValue+select_count-1)%select_count; }
		else if (GetVirtualKeyState(VK_DOWN) == KEY_PUSH) { selectValue = (selectValue+1)%select_count; }
		else if (GetVirtualKeyState(VK_OK) == KEY_PUSH) { break; }
		
		ascent(i in 0 .. length(objSelects))
		{
			if (selectValue == i) { ObjRender_SetColor(objSelects[i], 255, 255, 255); }
			else { ObjRender_SetColor(objSelects[i], 128, 128, 128); }
		}
		yield;
	}
	descent(i in 0 .. 8)
	{
		let tmp = (i+1)/8;
		ascent(i in 0 .. length(objSelects))
		{
			ObjRender_SetAlpha(objSelects[i], tmp*255);
		}
		yield;
	}
	ascent(i in 0 .. length(objSelects))
	{
		Obj_Delete(objSelects[i]);
	}
	
	return(selectValue);
}

// テキスト作るよ！
function MakeDescriptiveText(text, baseX, baseY, baseWidth, baseHeight, t_priority)
{
	let objText = ObjText_Create();
	Obj_SetRenderPriorityI(objText, t_priority+1);
	ObjText_SetFontType(objText, baseFont);
	ObjText_SetFontSize(objText, baseFontSize);
	ObjText_SetFontBold(objText, false);
	ObjText_SetLinePitch(objText, baseFontLinePitch);
	ObjText_SetMaxWidth(objText, baseWidth-32);
	ObjText_SetFontBorderWidth(objText, 1);
	ObjText_SetFontBorderColor(objText, 64, 64, 64);
	ObjText_SetFontBorderType(objText, BORDER_SHADOW);
	ObjText_SetText(objText, text);
	
	ObjText_SetAutoTransCenter(objText, false);
	ObjRender_SetPosition(objText, baseX, baseY, 0);
	ObjText_SetTransCenter(objText, 0, baseHeight);
	ObjRender_SetColor(objText, 255, 255, 255);
	
	return(objText);
}
