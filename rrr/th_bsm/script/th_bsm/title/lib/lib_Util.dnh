//----------------------------------------------------
// メニュー関連
//----------------------------------------------------
// メニュー項目用
function Menu_AddValue(obj, key, add_value, max_value)
{
	if (max_value <= 0) { Obj_SetValue(obj, key, 0); }
	else { Obj_SetValue(obj, key, (Obj_GetValueD(obj, key, -1)+max_value+add_value)%max_value); }
}
// ループなしver
function Menu_AddValue2(obj, key, add_value, max_value)
{
	if (max_value <= 0) { Obj_SetValue(obj, key, 0); }
	else { Obj_SetValue(obj, key, max(0, min(max_value-1, Obj_GetValueD(obj, key, -1)+add_value))); }
}
// 選択不可の欄は飛ばす
function Menu_AddValueEx(obj, key, add_value, max_value)
{
	Menu_AddValue(obj, key, add_value, max_value);
	let t = 0;	//念のため。無限ループ防止
	while(GetIgnoreMenuIndex(obj, Obj_GetValueD(obj, key, -1)) && t < 20)
		{ Menu_AddValue(obj, key, add_value, max_value); t++; }
}
// メニュー選択不可フラグ
function SetIgnoreMenuIndex(obj, index)
{
	Obj_SetValue(obj, "ALLOW"~IntToString(index), true);
}
function GetIgnoreMenuIndex(obj, index)
{
	return(Obj_GetValueD(obj, "ALLOW"~IntToString(index), false));
}
// メニュー記憶用
function CheckMenuMemory()
{
	let memorizedMenu = GetAreaCommonData(CAREA_TITLE, "MemorizedMenu", []);
	if (length(memorizedMenu) <= 0) { return(-1); }
	
	let tmp = memorizedMenu[0];
	memorizedMenu = erase(memorizedMenu, 0);
	SetAreaCommonData(CAREA_TITLE, "MemorizedMenu", memorizedMenu);
	return(tmp);
}
function CheckMemoryRemain()
{
	let memorizedMenu = GetAreaCommonData(CAREA_TITLE, "MemorizedMenu", []);
	return (length(memorizedMenu) > 0);
}
function SetMenuMemory(mem)
{
	SetAreaCommonData(CAREA_TITLE, "MemorizedMenu", mem);
}

//----------------------------------------------------
//数字用
//----------------------------------------------------
function SetNumber(obj, keta, num)
{
	if (num < 0)
	{
		ascent(i in 0 .. 6)
		{
			ObjPrim_SetVertexUVT(obj, keta*6+i, 63, 31);
		}
	}
	else
	{
		let ix = (num%8)*8;
		let iy = 32+trunc(num/8)*10;
		ObjPrim_SetVertexUVT(obj, keta*6  , ix, iy);
		ObjPrim_SetVertexUVT(obj, keta*6+1, ix+8, iy);
		ObjPrim_SetVertexUVT(obj, keta*6+2, ix, iy+10);
		ObjPrim_SetVertexUVT(obj, keta*6+3, ix+8, iy);
		ObjPrim_SetVertexUVT(obj, keta*6+4, ix, iy+10);
		ObjPrim_SetVertexUVT(obj, keta*6+5, ix+8, iy+10);
	}
}

function SetNumber_Base(obj, keta, x, y)
{
	ObjPrim_SetVertexPosition(obj, keta*6  , x, y, 0);
	ObjPrim_SetVertexPosition(obj, keta*6+1, x+8, y, 0);
	ObjPrim_SetVertexPosition(obj, keta*6+2, x, y+10, 0);
	ObjPrim_SetVertexPosition(obj, keta*6+3, x+8, y, 0);
	ObjPrim_SetVertexPosition(obj, keta*6+4, x, y+10, 0);
	ObjPrim_SetVertexPosition(obj, keta*6+5, x+8, y+10, 0);
}

function DigitToArray(let digit,let count)
{
	let res = [];
	digit = truncate(digit);

	loop
	{
		let tnum = truncate(digit % 10);
		digit /= 10;
		res = [tnum] ~ res;
		if (truncate(digit) == 0) { break; }
	}

	loop(max(0, count - length(res)))
	{
		res = [-1] ~ res;
	}

	return res;
}

//----------------------------------------------------
// 画面遷移エフェクト
//----------------------------------------------------
function RenderSceneToTransitionTexture()
{
	//現在のシーン内容を画面遷移用テクスチャに描画
	let textureName = GetTransitionRenderTargetName();
	RenderToTextureA1(textureName, 0, 100, true);
}

task TTransition
{
	let textureName = GetTransitionRenderTargetName();

	let objImage = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(objImage, 100); //描画優先度を設定
	ObjPrim_SetTexture(objImage, textureName); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objImage, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(objImage, 0, 0, 640, 480);

	let alpha = 255;
	while(alpha > 0)
	{
		ObjRender_SetAlpha(objImage, alpha);
		alpha -= 16;
		yield;
	}
	Obj_Delete(objImage);
}

//----------------------------------------------------
// 上に出てくるタイトル
//----------------------------------------------------
task MenuPartsFace(parent, img_index)
{
	let base_ix = (img_index%2)*512;
	let base_iy = trunc(img_index/2)*256;
	let base_x = GetScreenWidth/2;
	let base_y = 64;
	let animeTimer = 30;
	let scale = 0.55;
	
	let objText = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objText, 22);
	ObjPrim_SetTexture(objText, imgTtSelectFaceTxt);
	ObjSprite2D_SetDestRect(objText, -256, -128, 256, 128);
	ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+256);
	ObjRender_SetScaleXYZ(objText, scale, scale, 0);
	
	let t = 0;
	while(!Obj_IsDeleted(parent))
	{
		// 開幕アニメ
		if (t < animeTimer)
		{
			let tmp = sin((t+1)/animeTimer*90);
			ObjRender_SetPosition(objText, base_x, base_y-(1-tmp)*128, 0);
		}
		t++;
		yield;
	}
	descent(i in 0 .. 15)
	{
		let tmp = i/15;
		ObjRender_SetY(objText, ObjRender_GetY(objText)-10);
		ObjRender_SetAlpha(objText, tmp*255);
		yield;
	}
	Obj_Delete(objText);
}

//----------------------------------------------------
// その他便利系
//----------------------------------------------------
// システムテキスト
function SetSystemText(x, y, text)
{
	let obj = ObjText_Create();
	Obj_SetRenderPriorityI(obj, 30);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjText_SetText(obj, text);
	ObjText_SetFontSize(obj, 20);
	ObjText_SetFontType(obj, sysBaseFontJP);
	ObjText_SetFontColorBottom(obj, 192, 192, 192);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetAutoTransCenter(obj, false);
	ObjText_SetTransCenter(obj, 0, 0);
	ObjText_SetLinePitch(obj, -4);
	ObjText_SetSidePitch(obj, -1);
	return(obj);
}
// 明るいシステムテキスト（あんまり動かせないよ！）
function SetSystemTextEx(x, y, text)
{
	let obj = SetSystemText(x, y, text);
	ObjText_SetFontColorBottom(obj, 64, 64, 64);
	let obj2 = SetSystemText(x, y, text);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	TCheck_SetSystemTextEx(obj, obj2);
	return(obj);
}
task TCheck_SetSystemTextEx(parent, child)
{
	while(!Obj_IsDeleted(parent))
	{
		ObjRender_SetScaleXYZ(child, ObjRender_GetScaleX(parent), ObjRender_GetScaleY(parent), ObjRender_GetScaleZ(parent));
		ObjRender_SetPosition(child, ObjRender_GetX(parent), ObjRender_GetY(parent), ObjRender_GetZ(parent));
		yield;
	}
	Obj_Delete(child);
}
// システムテキスト（ドット）
function SetSystemTextDot(x, y, text)
{
	let obj = ObjText_Create();
	Obj_SetRenderPriorityI(obj, 30);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjText_SetText(obj, text);
	ObjText_SetFontSize(obj, 12);	// こいつは固定
	ObjText_SetFontType(obj, sysDotFont);
	ObjText_SetFontBorderColor(obj, 0, 0, 0);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	ObjText_SetAutoTransCenter(obj, false);
	ObjText_SetSidePitch(obj, -1);
	ObjText_SetTransCenter(obj, 0, 0);
	return(obj);
}

// ふるえる画像
task ShakeImage(obj, pos, r, timer)
{
	loop(timer)
	{
		let ox = round(randEffect(-r, r));
		let oy = round(randEffect(-r, r));
		ObjSprite2D_SetDestRect(obj, pos[0]+ox, pos[1]+oy, pos[2]+ox, pos[3]+oy);
		yield;
	}
	ObjSprite2D_SetDestRect(obj, pos[0], pos[1], pos[2], pos[3]);
}

//ブラックアウト
function EffectBlackOut(timer, alpha)
{
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, 20);
	ObjSprite2D_SetSourceRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjRender_SetBlendType(obj, BLEND_MULTIPLY);
	EffectBlackOut_Animation(obj, alpha);
	return(obj);
	
	task EffectBlackOut_Animation(obj, alpha)
	{
		ascent(i in 0 .. timer)
		{
			let tmp_alpha = 255-(i+1)/timer*alpha;
			ObjRender_SetColor(obj, tmp_alpha, tmp_alpha, tmp_alpha);
			yield;
		}
		while(!Obj_IsDeleted(obj) && !Obj_GetValueD(obj, "ERASE", false))
		{
			yield;
		}
		if (!Obj_IsDeleted(obj))
		{
			descent(i in 0 .. timer)
			{
				let tmp_alpha = 255-(i+1)/timer*alpha;
				ObjRender_SetColor(obj, tmp_alpha, tmp_alpha, tmp_alpha);
				yield;
			}
			Obj_Delete(obj);
		}
	}
}

